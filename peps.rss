<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Fri, 29 Aug 2025 22:50:23 GMT</lastBuildDate>
    <item>
      <title>PEP 802: Display Syntax for the Empty Set</title>
      <link>https://peps.python.org/pep-0802/</link>
      <description>We propose a new notation, {/}, to construct and represent the empty set. This is modelled after the corresponding mathematical symbol ‘\emptyset’.</description>
      <author>Adam Turner (adam@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0802/</guid>
      <pubDate>Fri, 08 Aug 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 800: Disjoint bases in the type system</title>
      <link>https://peps.python.org/pep-0800/</link>
      <description>To analyze Python programs precisely, type checkers need to know when two classes can and cannot have a common child class. However, the information necessary to determine this is not currently part of the type system. This PEP adds a new decorator, @typing.disjoint_base, that indicates that a class is a “disjoint base”. Two classes that have distinct, unrelated disjoint bases cannot have a common child class.</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0800/</guid>
      <pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 799: A dedicated ``profiling`` package for organizing Python profiling tools</title>
      <link>https://peps.python.org/pep-0799/</link>
      <description>This PEP proposes the creation of a new standard library module named profiling to organize Python’s built-in profiling tools under a single, coherent namespace.</description>
      <author>Pablo Galindo (pablogsal@python.org), László Kiss Kollár (kiss.kollar.laszlo@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0799/</guid>
      <pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 798: Unpacking in Comprehensions</title>
      <link>https://peps.python.org/pep-0798/</link>
      <description>This PEP proposes extending list, set, and dictionary comprehensions, as well as generator expressions, to allow unpacking notation (* and **) at the start of the expression, providing a concise way of combining an arbitrary number of iterables into one list or set or generator, or an arbitrary number of dictionaries into one dictionary, for example:</description>
      <author>Adam Hartz (hz@mit.edu), Erik Demaine (edemaine@mit.edu)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0798/</guid>
      <pubDate>Sat, 19 Jul 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 794: Import Name Metadata</title>
      <link>https://peps.python.org/pep-0794/</link>
      <description>This PEP proposes extending the core metadata specification for Python packaging to include two new, repeatable fields named Import-Name and Import-Namespace to record the import names that a project provides once installed. New keys named import-names and import-namespaces will be added to the [project] table in pyproject.toml for providing the values for the new core metadata fields. This also leads to the introduction of core metadata version 2.5.</description>
      <author>Brett Cannon (brett@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0794/</guid>
      <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 793: PyModExport: A new entry point for C extension modules</title>
      <link>https://peps.python.org/pep-0793/</link>
      <description>In this PEP, we propose a new entry point for C extension modules, by which one can define a module using an array of PyModuleDef_Slot structures without an enclosing PyModuleDef structure. This allows extension authors to avoid using a statically allocated PyObject, lifting the most common obstacle to making one compiled library file usable with both regular and free-threaded builds of CPython.</description>
      <author>Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0793/</guid>
      <pubDate>Fri, 23 May 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 792: Project status markers in the simple index</title>
      <link>https://peps.python.org/pep-0792/</link>
      <description>This PEP proposes a standardized set of index-supplied project status markers, as well as a mechanism for communicating those markers in the HTML and JSON simple indices.</description>
      <author> ()</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0792/</guid>
      <pubDate>Wed, 21 May 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 791: intmath --- module for integer-specific mathematics functions</title>
      <link>https://peps.python.org/pep-0791/</link>
      <description>This PEP proposes a new module for number-theoretical, combinatorial and other functions defined for integer arguments, like math.gcd() or math.isqrt().</description>
      <author>Sergey B Kirpichev (skirpichev@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0791/</guid>
      <pubDate>Mon, 12 May 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 790: Python 3.15 Release Schedule</title>
      <link>https://peps.python.org/pep-0790/</link>
      <description>This document describes the development and release schedule for Python 3.15.</description>
      <author>Hugo van Kemenade</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0790/</guid>
      <pubDate>Sat, 26 Apr 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 788: PyInterpreterRef: Interpreter References in the C API</title>
      <link>https://peps.python.org/pep-0788/</link>
      <description>In the C API, threads are able to interact with an interpreter by holding an attached thread state for the current thread. This works well, but can get complicated when it comes to creating and attaching thread states in a thread-safe manner.</description>
      <author>Peter Bierma (zintensitydev@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0788/</guid>
      <pubDate>Wed, 23 Apr 2025 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
